# daemon off; # This is already specified in the container args and nginx freaks if it's specified twice.

worker_processes 1;

events { worker_connections 1024; }

http {

  # We're in Docker, duh.
  access_log  /dev/stdout;
  error_log   /dev/stderr;

  # This will probably be useful.
  proxy_set_header Host $host;
  proxy_set_header X-Forwarded-Server $host;
  proxy_set_header X-Forwarded-Host $host;
  proxy_set_header X-Forwarded-For $host;
  proxy_pass_request_headers on;
  underscores_in_headers on;
  client_max_body_size 16M;

  # ssl_certificate     /etc/ssl/fullchain.pem;
  # ssl_certificate_key /etc/ssl/privkey.pem;

  server {
    listen 80;
    listen 32400;
    server_name plex.cjbotta.ro;

    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection Upgrade;

    location / { proxy_pass http://plex:32400; }
  }

  server {
    listen 80;
    server_name radarr.cjbotta.ro;

    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection Upgrade;

    location / { proxy_pass http://radarr:7878; }
  }

  server {
    listen 80;
    server_name sonarr.cjbotta.ro;

    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection Upgrade;

    location / { proxy_pass http://sonarr:8989; }
  }

  server {
    listen 80;
    server_name sabnzbd.cjbotta.ro;

    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection Upgrade;

    location / { proxy_pass http://sabnzbd:8080; }
  }

  server {
    listen 80;
    server_name chat.cjbotta.ro;

    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection Upgrade;

    location / { proxy_pass http://chat:4000; }
  }

  server {
    listen 80;
    server_name registry.cjbotta.ro;

    client_max_body_size 0;

    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection Upgrade;

    location / { proxy_pass http://registry:5000; }
  }

  server {
    listen 80 default_server;
    server_name _;
    
    location = /ping {
      access_log off;
      return 200 "pong/n";
    }

    location / {
      return 302 https://$host$request_uri;
    }
  }

}
